"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat",{

/***/ "(middleware)/./utils/server/index.ts":
/*!*******************************!*\
  !*** ./utils/server/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   OpenAIStream: () => (/* binding */ OpenAIStream)\n/* harmony export */ });\n/* harmony import */ var _app_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app/const */ \"(middleware)/./utils/app/const.ts\");\n/* harmony import */ var eventsource_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventsource-parser */ \"(middleware)/./node_modules/eventsource-parser/dist/index.esm.js\");\n\n\nclass OpenAIError extends Error {\n    constructor(message, type, param, code){\n        super(message);\n        this.name = \"OpenAIError\";\n        this.type = type;\n        this.param = param;\n        this.code = code;\n    }\n}\nconst OpenAIStream = async (model, systemPrompt, temperature, key, messages)=>{\n    // ==================== PARTIE DU CODE A MODIFIER ====================\n    let url = \"http://127.0.0.1:5000/hello\";\n    // let url = `${OPENAI_API_HOST}/v1/chat/completions`;\n    // if (OPENAI_API_TYPE === 'azure') {\n    //   url = `${OPENAI_API_HOST}/openai/deployments/${AZURE_DEPLOYMENT_ID}/chat/completions?api-version=${OPENAI_API_VERSION}`;\n    // }\n    const res = await fetch(url, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ..._app_const__WEBPACK_IMPORTED_MODULE_0__.OPENAI_API_TYPE === \"openai\" && {\n                Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n            },\n            ..._app_const__WEBPACK_IMPORTED_MODULE_0__.OPENAI_API_TYPE === \"azure\" && {\n                \"api-key\": `${key ? key : process.env.OPENAI_API_KEY}`\n            },\n            ..._app_const__WEBPACK_IMPORTED_MODULE_0__.OPENAI_API_TYPE === \"openai\" && _app_const__WEBPACK_IMPORTED_MODULE_0__.OPENAI_ORGANIZATION && {\n                \"OpenAI-Organization\": _app_const__WEBPACK_IMPORTED_MODULE_0__.OPENAI_ORGANIZATION\n            }\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n            question: messages[messages.length - 1].content,\n            file_names: [\n                \"prospectus/prospectus_exemple_3.pdf\"\n            ],\n            // ...(OPENAI_API_TYPE === 'openai' && {model: model.id}),\n            // messages: [\n            //   {\n            //     role: 'system',\n            //     content: systemPrompt,\n            //   },\n            //   ...messages,\n            // ],\n            // max_tokens: 1000,\n            // temperature: temperature,\n            stream: true\n        })\n    });\n    // ==================== FIN PARTIE DU CODE A MODIFIER ====================\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    if (res.status !== 200) {\n        const result = await res.json();\n        if (result.error) {\n            throw new OpenAIError(result.error.message, result.error.type, result.error.param, result.error.code);\n        } else {\n            throw new Error(`OpenAI API returned an error: ${decoder.decode(result?.value) || result.statusText}`);\n        }\n    }\n    const stream = new ReadableStream({\n        async start (controller) {\n            const onParse = (event)=>{\n                if (event.type === \"event\") {\n                    const data = event.data;\n                    try {\n                        const json = JSON.parse(data);\n                        if (json.choices[0].finish_reason != null) {\n                            controller.close();\n                            return;\n                        }\n                        const text = json.choices[0].delta.content;\n                        const queue = encoder.encode(text);\n                        controller.enqueue(queue);\n                    } catch (e) {\n                        controller.error(e);\n                    }\n                }\n            };\n            const parser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_1__.createParser)(onParse);\n            for await (const chunk of res.body){\n                parser.feed(decoder.decode(chunk));\n            }\n        }\n    });\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./utils/server/index.ts\n");

/***/ })

});